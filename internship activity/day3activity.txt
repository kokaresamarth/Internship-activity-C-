/*Internship activity - <Day 3>
  Project: Rapido Vision Measuring System.
  Task: <C++ activity>
  Compiler:Windows 10
  IDE:VS Code 

Q1. Write a function for Bubble Sort. It should be passed an array and an int giving the array size, and it
should return with the array sorted. 
*/

#include <iostream>
using namespace std;
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    bubbleSort(arr, n);
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}

Output:
Enter the number of elements: 5
Enter the elements: 
5
4
3
2
1
Sorted array: 1 2 3 4 5 


Q2. Write a function "print_pyramid(...)" which takes a single integer argument "height" and displays a
"pyramid" of this height made up of of "*" characters on the screen. 

*/
#include <iostream>
using namespace std;
void print_pyramid(int height) {
    for (int i = 1; i <= height; i++) {
        for (int j = 1; j <= height - i; j++) {
            cout << " ";
        }
        for (int j = 1; j <= (2 * i - 1); j++) {
            cout << "*";
        }
        cout << endl;
    }
}

int main() {
    int height;
    cout << "Enter the height of the pyramid: ";
    cin >> height;
    print_pyramid(height);
    return 0;
}

Output:
Enter the height of the pyramid: 6
     *
    ***
   *****
  *******
 *********
***********


Test the function with a simple "driver" program, which should be able to reproduce the following
example output:
 This program prints a 'pyramid' shape of a specified height on the screen.
 **
 ****
 ******
 ********
 **********
 ************
*/

#include <iostream>
using namespace std;
void print_pyramid(int height) {
    for (int i = 1; i <= height; i++) {
        for (int j = 1; j <= 2 * i; j++) {
            cout << "*";
        }
        cout << endl;
    }
}

int main() {
    int height;
    cout << "Enter the height of the pyramid: ";
    cin >> height;
    print_pyramid(height);
    return 0;
}

Enter the height of the pyramid: 7
**
****
******
********
**********
************
**************


Q4.Demonstrate Function to reverse the elements of an array using pointers. 

*/

#include <iostream>
using namespace std;
void reverseArray(int* arr, int size) {
    int* start = arr;            
    int* end = arr + size - 1;  
    while (start < end) {
        int temp = *start;
        *start = *end;
        *end = temp;
        start++;
        end--;
    }
}

int main() {
    int size;
    cout << "Enter the size of the array: ";
    cin >> size;
    int arr[size];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }
    cout << "Original array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    reverseArray(arr, size);
    cout << "Reversed array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}

Output:
Enter the size of the array: 5
Enter the elements of the array: 1 2 3 4 5
Original array: 1 2 3 4 5 
Reversed array: 5 4 3 2 1 


Q5. Write C program to sort an array of integers in ascending or descending order using a callback
function to compare the elements.  

*/

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
bool ascending(int a, int b) {
    return a < b; 
}
bool descending(int a, int b) {
    return a > b; 
}
int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    vector<int> arr(n); 
    cout << "Enter " << n << " elements:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    sort(arr.begin(), arr.end(), ascending);
    cout << "Array sorted in ascending order:" << endl;
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    sort(arr.begin(), arr.end(), descending);
    cout << "Array sorted in descending order:" << endl;
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}

output:
Enter the number of elements: 5
Enter 5 elements:
3 8 4 9 6
Array sorted in ascending order:
3 4 6 8 9 
Array sorted in descending order:
9 8 6 4 3 